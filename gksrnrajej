local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "한국머더 " .. Fluent.Version,
    SubTitle = "by K-MurderTeam 🔪",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "http://www.roblox.com/asset/?id=109306454828475" }),
    Utility = Window:AddTab({ Title = "Utility", Icon = "h" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "한국머더 🔪",
        Content = "This is a notification",
        SubContent = "SubContent", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })

    local Toggle = Tabs.Utility:AddToggle("MyToggle", 
    {
        Title = "자동 패드립", 
        Description = "자동으로 패드립을 해줍니다!",
        Default = false,
        Callback = function(state)
        if state then
            _G.padrip = true



while _G.padrip do

local text = ": ㅇㅇ 니 엄;;마 아;;빠 윤;;석;;열"
game:GetService("TextChatService").ChatInputBarConfiguration.TargetTextChannel:SendAsync(""..string.rep("\r",1)..text)

wait(1)

local text = ": 쳐 ;;;; 레벨이 밥 먹여주디?"
game:GetService("TextChatService").ChatInputBarConfiguration.TargetTextChannel:SendAsync(""..string.rep("\r",1)..text)

wait(1)

local text = ": 한머에 박혀있는 찐;;특 나오노 ㅋ"
game:GetService("TextChatService").ChatInputBarConfiguration.TargetTextChannel:SendAsync(""..string.rep("\r",1)..text)

wait(1)

local text = ": ㅂ;;ㅅ ㅋㅋㅋㅋ 말;;빨 검나 딸리네"
game:GetService("TextChatService").ChatInputBarConfiguration.TargetTextChannel:SendAsync(""..string.rep("\r",1)..text)

wait(1)

local text = ": ㅂ;;ㅅ 찌;;끄;;레기 ㅋ"
game:GetService("TextChatService").ChatInputBarConfiguration.TargetTextChannel:SendAsync(""..string.rep("\r",1)..text)

wait(1)

local text = ": ㅂㄷㅂㄷ?? 긁? 긁혔노 이 ;; 기 야 ㅋㅋ"
game:GetService("TextChatService").ChatInputBarConfiguration.TargetTextChannel:SendAsync(""..string.rep("\r",1)..text)
wait(1)
end

        else
            _G.padrip = false



while _G.padrip do

local text = ": ㅇㅇ 니 엄;;마 아;;빠 윤;;석;;열"
game:GetService("TextChatService").ChatInputBarConfiguration.TargetTextChannel:SendAsync(""..string.rep("\r",1)..text)

wait(1)

local text = ": 쳐 ;;;; 레벨이 밥 먹여주디?"
game:GetService("TextChatService").ChatInputBarConfiguration.TargetTextChannel:SendAsync(""..string.rep("\r",1)..text)

wait(1)

local text = ": 한머에 박혀있는 찐;;특 나오노 ㅋ"
game:GetService("TextChatService").ChatInputBarConfiguration.TargetTextChannel:SendAsync(""..string.rep("\r",1)..text)

wait(1)

local text = ": ㅂ;;ㅅ ㅋㅋㅋㅋ 말;;빨 검나 딸리네"
game:GetService("TextChatService").ChatInputBarConfiguration.TargetTextChannel:SendAsync(""..string.rep("\r",1)..text)

wait(1)

local text = ": ㅂ;;ㅅ 찌;;끄;;레기 ㅋ"
game:GetService("TextChatService").ChatInputBarConfiguration.TargetTextChannel:SendAsync(""..string.rep("\r",1)..text)

wait(1)

local text = ": ㅂㄷㅂㄷ?? 긁? 긁혔노 이 ;; 기 야 ㅋㅋ"
game:GetService("TextChatService").ChatInputBarConfiguration.TargetTextChannel:SendAsync(""..string.rep("\r",1)..text)
wait(1)
end

            end
        end 
    })

    Tabs.Utility:AddButton({
        Title = "사람 이름으로 날리기",
        Description = "사람을 이름으로 날릴수 있습니다!",
        Callback = function()
            -- player fling gui
 
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
 
local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local TextBox = Instance.new("TextBox")
local TextButton = Instance.new("TextButton")
 
ScreenGui.Parent = Player:WaitForChild("PlayerGui")
ScreenGui.ResetOnSpawn = false
 
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
Frame.Position = UDim2.new(0.5, -100, 0.5, -50)
Frame.Size = UDim2.new(0, 200, 0, 100)
Frame.Active = true
Frame.Draggable = true
 
TextBox.Parent = Frame
TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextBox.Position = UDim2.new(0.1, 0, 0.2, 0)
TextBox.Size = UDim2.new(0.8, 0, 0.2, 0)
TextBox.Font = Enum.Font.SourceSans
TextBox.PlaceholderText = "Enter username"
TextBox.Text = ""
TextBox.TextColor3 = Color3.fromRGB(0, 0, 0)
TextBox.TextSize = 14
 
TextButton.Parent = Frame
TextButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
TextButton.Position = UDim2.new(0.1, 0, 0.5, 0)
TextButton.Size = UDim2.new(0.8, 0, 0.4, 0)
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = "FLING!"
TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton.TextSize = 20
 
local function GetPlayer(Name)
    Name = Name:lower()
    for _, x in next, Players:GetPlayers() do
        if x ~= Player then
            if x.Name:lower():match("^" .. Name) or x.DisplayName:lower():match("^" .. Name) then
                return x
            end
        end
    end
    return nil
end
 
local function Message(_Title, _Text, Time)
    game:GetService("StarterGui"):SetCore("SendNotification", {Title = _Title, Text = _Text, Duration = Time})
end
 
local function SkidFling(TargetPlayer)
    local Character = Player.Character
    local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
    local RootPart = Humanoid and Humanoid.RootPart
 
    local TCharacter = TargetPlayer.Character
    local THumanoid = TCharacter and TCharacter:FindFirstChildOfClass("Humanoid")
    local TRootPart = THumanoid and THumanoid.RootPart
    local THead = TCharacter and TCharacter:FindFirstChild("Head")
    local Accessory = TCharacter and TCharacter:FindFirstChildOfClass("Accessory")
    local Handle = Accessory and Accessory:FindFirstChild("Handle")
 
    if Character and Humanoid and RootPart then
        if RootPart.Velocity.Magnitude < 50 then
            getgenv().OldPos = RootPart.CFrame
        end
        if THumanoid and THumanoid.Sit then
            return Message("Error Occurred", "Target is sitting", 5)
        end
        if THead then
            workspace.CurrentCamera.CameraSubject = THead
        elseif Handle then
            workspace.CurrentCamera.CameraSubject = Handle
        else
            workspace.CurrentCamera.CameraSubject = THumanoid
        end
        if not TCharacter:FindFirstChildWhichIsA("BasePart") then
            return
        end
 
        local function FPos(BasePart, Pos, Ang)
            RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
            Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
            RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
            RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
        end
 
        local function SFBasePart(BasePart)
            local TimeToWait = 2
            local Time = tick()
            local Angle = 0
 
            repeat
                if RootPart and THumanoid then
                    if BasePart.Velocity.Magnitude < 50 then
                        Angle = Angle + 100
 
                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle),0 ,0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                    else
                        FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, -TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5 ,0), CFrame.Angles(math.rad(-90), 0, 0))
                        task.wait()
 
                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                        task.wait()
                    end
                else
                    break
                end
            until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
        end
 
        workspace.FallenPartsDestroyHeight = 0/0
 
        local BV = Instance.new("BodyVelocity")
        BV.Name = "EpixVel"
        BV.Parent = RootPart
        BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
        BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)
 
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
 
        if TRootPart and THead then
            if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
                SFBasePart(THead)
            else
                SFBasePart(TRootPart)
            end
        elseif TRootPart and not THead then
            SFBasePart(TRootPart)
        elseif not TRootPart and THead then
            SFBasePart(THead)
        elseif not TRootPart and not THead and Accessory and Handle then
            SFBasePart(Handle)
        else
            return Message("Error Occurred", "Target is missing everything", 5)
        end
 
        BV:Destroy()
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        workspace.CurrentCamera.CameraSubject = Humanoid
 
        repeat
            RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
            Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
            Humanoid:ChangeState("GettingUp")
            table.foreach(Character:GetChildren(), function(_, x)
                if x:IsA("BasePart") then
                    x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
                end
            end)
            task.wait()
        until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
        workspace.FallenPartsDestroyHeight = getgenv().FPDH
    else
        return Message("Error Occurred", "Random error", 5)
    end
end
 
TextButton.MouseButton1Click:Connect(function()
    local targetName = TextBox.Text
    local targetPlayer = GetPlayer(targetName)
 
    if targetPlayer then
        SkidFling(targetPlayer)
    else
        Message("Error Occurred", "Invalid username", 5)
    end
end)
        end
    })

    Tabs.Utility:AddButton({
        Title = "모든 사람 날리기",
        Description = "모든 사람을 날려버립니다다!",
        Callback = function()
            loadstring(game:HttpGet("https://pastebin.com/raw/zqyDSUWX"))() 
        end
    })

    local Toggle = Tabs.Main:AddToggle("MyToggle", 
    {
        Title = "코인 자동 수집", 
        Description = "코인을 자동으로 수집 해줍니다!",
        Default = false,
        Callback = function(state)
        if state then
            loadstring(game:HttpGet("https://pastebin.com/raw/TrfXEGrL"))()
        else
            loadstring(game:HttpGet("https://pastebin.com/raw/haNLMKUH"))()
            end
        end 
    })

Tabs.Main:AddButton({
    Title = "에임봇",
    Description = "보안관일떄 에임을 도와줍니다!",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/yzeedw/Mortalv2-main/main/UNIVERSAL%20AIMBOT"))()
    end
})

local Toggle = Tabs.Main:AddToggle("MyToggle", 
{
    Title = "총 줍기", 
    Description = "자동으로 리볼버를 잡게 해줍니다!",
    Default = false,
    Callback = function(state)
    if state then
        _G.auto = true


while _G.auto do

game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.Game.Debris.RevolverPickUp.Orb.CFrame.Position)
wait(0.1)
end
    else
        _G.auto = false


while _G.auto do

game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.Game.Debris.RevolverPickUp.Orb.CFrame.Position)
wait(0.1)
end
        end
    end 
})

    local Toggle = Tabs.Main:AddToggle("MyToggle", 
    {
        Title = "ESP", 
        Description = "ESP를 켜줍니다!",
        Default = false,
        Callback = function(state)
        if state then
            local settings = {
                defaultcolor = Color3.fromRGB(0, 255, 0),
                teamcheck = false,
                teamcolor = true
            };
            
            local runService = game:GetService("RunService");
            local players = game:GetService("Players");
            
            local localPlayer = players.LocalPlayer;
            local camera = workspace.CurrentCamera;
            
            local newVector2, newColor3, newDrawing = Vector2.new, Color3.new, Drawing.new;
            local tan, rad = math.tan, math.rad;
            local round = function(...) local a = {}; for i,v in next, table.pack(...) do a[i] = math.round(v); end return unpack(a); end;
            local wtvp = function(...) local a, b = camera.WorldToViewportPoint(camera, ...) return newVector2(a.X, a.Y), b, a.Z end;
            
            local espCache = {};
            
            local function getToolColor(player)
                local color = settings.defaultcolor
                local character = player.Character
                local backpack = player.Backpack
            
                if backpack then
                    local hasTool = false
                    for _, tool in ipairs(backpack:GetChildren()) do
                        if tool:IsA("Tool") then
                            hasTool = true
                            if tool.Name == "Knife" then
                                color = Color3.fromRGB(255, 0, 0)
                            elseif tool.Name == "Revolver" then
                                color = Color3.fromRGB(0, 0, 255)
                            elseif tool.Name == "HeroRevolver" then
                                color = Color3.fromRGB(255, 255, 0)
                            end
                        end
                    end
                    for _, tool in ipairs(character:GetChildren()) do
                        if tool:IsA("Tool") then
                            hasTool = true
                            if tool.Name == "Knife" then
                                color = Color3.fromRGB(255, 0, 0)
                            elseif tool.Name == "Revolver" then
                                color = Color3.fromRGB(0, 0, 255)
                            elseif tool.Name == "HeroRevolver" then
                                color = Color3.fromRGB(255, 255, 0)
                            end
                        end
                    end
                    if not hasTool then
                        color = Color3.fromRGB(0, 255, 0)
                    end
                end
            
                return color
            end
            
            local function createEsp(player)
                local drawings = {};
            
                drawings.box = newDrawing("Square");
                drawings.box.Thickness = 1;
                drawings.box.Filled = false;
                drawings.box.Visible = false;
                drawings.box.ZIndex = 2;
            
                drawings.boxoutline = newDrawing("Square");
                drawings.boxoutline.Thickness = 3;
                drawings.boxoutline.Filled = false;
                drawings.boxoutline.Color = newColor3();
                drawings.boxoutline.Visible = false;
                drawings.boxoutline.ZIndex = 1;
            
                espCache[player] = drawings;
            end
            
            local function removeEsp(player)
                if rawget(espCache, player) then
                    for _, drawing in next, espCache[player] do
                        drawing:Remove();
                    end
                    espCache[player] = nil;
                end
            end
            
            local function updateEsp(player, esp)
                local character = player and player.Character;
                if character then
                    local cframe = character:GetModelCFrame();
                    local position, visible, depth = wtvp(cframe.Position);
                    esp.box.Visible = visible;
                    esp.boxoutline.Visible = visible;
            
                    if cframe and visible then
                        local scaleFactor = 1 / (depth * tan(rad(camera.FieldOfView / 2)) * 2) * 1000;
                        local width, height = round(4 * scaleFactor, 5 * scaleFactor);
                        local x, y = round(position.X, position.Y);
            
                        esp.box.Size = newVector2(width, height);
                        esp.box.Position = newVector2(round(x - width / 2, y - height / 2));
            
                        esp.box.Color = getToolColor(player);
            
                        esp.boxoutline.Size = esp.box.Size;
                        esp.boxoutline.Position = esp.box.Position;
                    end
                else
                    esp.box.Visible = false;
                    esp.boxoutline.Visible = false;
                end
            end
            
            for _, player in next, players:GetPlayers() do
                if player ~= localPlayer then
                    createEsp(player);
                end
            end
            
            players.PlayerAdded:Connect(function(player)
                createEsp(player);
            end);
            
            players.PlayerRemoving:Connect(function(player)
                removeEsp(player);
            end)
            
            runService:BindToRenderStep("esp", Enum.RenderPriority.Camera.Value, function()
                for player, drawings in next, espCache do
                    if settings.teamcheck and player.Team == localPlayer.Team then
                        continue;
                    end
            
                    if drawings and player ~= localPlayer then
                        updateEsp(player, drawings);
                    end
                end
            end)
        else
            print("Making..")
            end
        end 
    })

    local Toggle = Tabs.Main:AddToggle("MyToggle", 
    {
        Title = "칼 안맞기기", 
        Description = "근접에서 칼을 안맞게 해줍니다!",
        Default = false,
        Callback = function(state)
        if state then
            loadstring(game:HttpGet("https://pastebin.com/raw/c3VXgEj0"))()
        else
            loadstring(game:HttpGet("https://pastebin.com/raw/6k2CKcYu"))()
            end
        end 
    })

    



    local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Dropdown",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = false,
        Default = 1,
    })

    Dropdown:SetValue("four")

    Dropdown:OnChanged(function(Value)
        print("Dropdown changed:", Value)
    end)


    
    local MultiDropdown = Tabs.Main:AddDropdown("MultiDropdown", {
        Title = "Dropdown",
        Description = "You can select multiple values.",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = true,
        Default = {"seven", "twelve"},
    })

    MultiDropdown:SetValue({
        three = true,
        five = true,
        seven = false
    })

    MultiDropdown:OnChanged(function(Value)
        local Values = {}
        for Value, State in next, Value do
            table.insert(Values, Value)
        end
        print("Mutlidropdown changed:", table.concat(Values, ", "))
    end)



    local Colorpicker = Tabs.Main:AddColorpicker("Colorpicker", {
        Title = "Colorpicker",
        Default = Color3.fromRGB(96, 205, 255)
    })

    Colorpicker:OnChanged(function()
        print("Colorpicker changed:", Colorpicker.Value)
    end)
    
    Colorpicker:SetValueRGB(Color3.fromRGB(0, 255, 140))



    local TColorpicker = Tabs.Main:AddColorpicker("TransparencyColorpicker", {
        Title = "Colorpicker",
        Description = "but you can change the transparency.",
        Transparency = 0,
        Default = Color3.fromRGB(96, 205, 255)
    })

    TColorpicker:OnChanged(function()
        print(
            "TColorpicker changed:", TColorpicker.Value,
            "Transparency:", TColorpicker.Transparency
        )
    end)



    local Keybind = Tabs.Main:AddKeybind("Keybind", {
        Title = "KeyBind",
        Mode = "Toggle", -- Always, Toggle, Hold
        Default = "LeftControl", -- String as the name of the keybind (MB1, MB2 for mouse buttons)

        -- Occurs when the keybind is clicked, Value is `true`/`false`
        Callback = function(Value)
            print("Keybind clicked!", Value)
        end,

        -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
        ChangedCallback = function(New)
            print("Keybind changed!", New)
        end
    })

    -- OnClick is only fired when you press the keybind and the mode is Toggle
    -- Otherwise, you will have to use Keybind:GetState()
    Keybind:OnClick(function()
        print("Keybind clicked:", Keybind:GetState())
    end)

    Keybind:OnChanged(function()
        print("Keybind changed:", Keybind.Value)
    end)

    task.spawn(function()
        while true do
            wait(1)

            -- example for checking if a keybind is being pressed
            local state = Keybind:GetState()
            if state then
                print("Keybind is being held down")
            end

            if Fluent.Unloaded then break end
        end
    end)

    Keybind:SetValue("MB2", "Toggle") -- Sets keybind to MB2, mode to Hold


    local Input = Tabs.Main:AddInput("Input", {
        Title = "Input",
        Default = "Default",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            print("Input changed:", Value)
        end
    })

    Input:OnChanged(function()
        print("Input updated:", Input.Value)
    end)
end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
